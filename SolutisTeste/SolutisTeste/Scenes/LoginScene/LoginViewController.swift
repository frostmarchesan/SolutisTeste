//
//  LoginViewController.swift
//  SolutisTeste
//
//  Created by Virtual Machine on 26/11/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displaySomething(viewModel: Login.Something.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    
    var interactor: LoginInteractor?
    var interactorBussinessLogic: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
    }
    
    // MARK: Do something
    
    @IBOutlet weak var loginTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var switchButtonOutlet: UISwitch!
    @IBOutlet weak var loginButtonOutlet: UIButton!
    @IBOutlet weak var circleViewOutlet: UIView!
    
    
    @IBAction func loginButtonPressed(_ sender: UIButton) {
        loginButtonOutlet.isEnabled = false
        guard let userLogin = loginTextField.text else { return }
        guard let userPassword = passwordTextField.text else { return }
        performLogin(login: userLogin, password: userPassword)
    }
    
    
    @IBAction func saveUserSwitch(_ sender: UISwitch) {
        if (sender.isOn) {
            interactor?.saveUserLoginSwitch()
        } else {
            switchButtonOutlet.isOn = false
            interactor?.worker?.dontSaveUserKeyChain()
        }
    }
    
    func performLogin(login: String, password: String)
    {
        let request = Login.Something.Request(userLogin: login, userPassword: password)
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Login.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func presentSavedUserData(user: Login.Something.ViewModel) {
        loginTextField.text = user.user.login
        passwordTextField.text = user.user.password
    }
}
