//
//  LoginInteractor.swift
//  SolutisTeste
//
//  Created by Virtual Machine on 26/11/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func doSomething(request: Login.Something.Request)
}

protocol LoginDataStore
{
    //var name: String { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    func doSomething(request: Login.Something.Request)
    {
        worker = LoginWorker()
//        worker?.doSomeWork()
        
//        let response = Login.Something.Response()
//        presenter?.presentSomething(response: response)
    }
    func saveUserLoginSwitch (){
        worker?.saveUserKeyChain()
    }
    
    func dontSaveUserLoginSwitch(){
        worker?.dontSaveUserKeyChain()
    }
    
    func permformLogin(url: String, userLogin: String, userPassword: String, completionHandler: @escaping (Result<User, Error>) -> Void) {
        
        do {
            try worker?.loginRequest(url: url, userLogin: userLogin, userPassword: userPassword, completionHandler: completionHandler) { result in
                switch result {
                case .success(let user):
                    // criar usuário
                    // passar dados para a presenter
                    // chamar o router para passar dados para a tela de extrato
                    return
                case .failure(let error):
                    return
                }
            }
        } catch { return }
            
    }
    
    func loginCheck(login: String) {
        let loginPass = worker?.loginCheck(login: login)
        // retornar um verdadeiro ou false e devolver informações à presenter
        if (false) {
            
        }
    }
    
    func passwordCheck(password: String) {
        let passwordPass =        worker?.passwordCheck(password: password)
        // retornar um verdadeiro ou false e devolver informações à presenter
        if (false) {
            
        }
    }
    
    func getKeyChain(key: String) -> String {
        if let data = worker?.getKeyChain(key: key) { return data }
        else { return "" }
    }
    
    func eraseKeyChain(key: String)  {
        worker?.eraseKeyChain(key: key)
    }
    
    
}
